
# CONSOLE_WEB_URL=//tk-ai-kit-dify.apps.touk.io
captainVersion: 4
services:
  # API service
  $$cap_appname-api:
    image: aristofanio/tk_ai_kit_dify_api:latest
    restart: always
    environment:
      # Startup mode, 'api' starts the API server.
      MODE: api
      DEPLOY_ENV: PRODUCTION
      DB_HOST: $$cap_dify-pg-host
      REDIS_HOST: $$cap_dify-redis-host
      APP_WEB_URL: https://$$cap_appname.$$cap_dify-domain # display
      SERVICE_API_URL: https://$$cap_appname.$$cap_dify-domain # display
      CONSOLE_WEB_URL: https://$$cap_appname.$$cap_dify-domain
      CONSOLE_API_URL: https://$$cap_appname.$$cap_dify-domain
      CELERY_BROKER_URL: redis://$$cap_dify-redis-host:6379/1
      WEAVIATE_ENDPOINT: http://srv-captain--$$cap_appname-weaviate:8080
    volumes:
      - dify-api-worker-storage:/app/api/storage
    caproverExtra:
      notExposeAsWebApp: 'true'

  # worker service
  # The Celery worker for processing the queue.
  $$cap_appname-worker:
    image: aristofanio/tk_ai_kit_dify_worker:latest
    restart: always
    environment:
      # Startup mode, 'worker' starts the Celery worker for processing the queue.
      MODE: worker
      DEPLOY_ENV: PRODUCTION
      DB_HOST: $$cap_dify-pg-host
      REDIS_HOST: $$cap_dify-redis-host
      APP_WEB_URL: https://$$cap_appname.$$cap_dify-domain # display
      SERVICE_API_URL: https://$$cap_appname.$$cap_dify-domain # display
      CONSOLE_WEB_URL: https://$$cap_appname.$$cap_dify-domain
      CONSOLE_API_URL: https://$$cap_appname.$$cap_dify-domain
      CELERY_BROKER_URL: redis://$$cap_dify-redis-host:6379/1
      WEAVIATE_ENDPOINT: http://srv-captain--$$cap_appname-weaviate:8080
    volumes:
      - dify-api-worker-storage:/app/api/storage
    caproverExtra:
      notExposeAsWebApp: 'true'

  # Frontend web application.
  $$cap_appname-web:
    image: aristofanio/tk_ai_kit_dify_web:latest
    restart: always
    environment:
      DEPLOY_ENV: PRODUCTION
      APP_API_URL: //$$cap_appname.$$cap_dify-domain
      CONSOLE_WEB_URL: //$$cap_appname.$$cap_dify-domain
      CONSOLE_API_URL: //$$cap_appname.$$cap_dify-domain
      SERVICE_API_URL: //$$cap_appname.$$cap_dify-domain
      SENTRY_DSN: ''
      NEXT_TELEMETRY_DISABLED: '0'
      TEXT_GENERATION_TIMEOUT_MS: 60000
      CSP_WHITELIST: ''
    caproverExtra:
      notExposeAsWebApp: 'true'

  # The DifySandbox
  $$cap_appname-sandbox:
    image: aristofanio/tk_ai_kit_dify_sandbox:latest
    restart: always
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: dify-sandbox
      GIN_MODE: release
      WORKER_TIMEOUT: 15
      ENABLE_NETWORK: true
      HTTP_PROXY: http://srv-captain--$$cap_appname-ssrf-proxy:3128
      HTTPS_PROXY: http://srv-captain--$$cap_appname-ssrf-proxy:3128
      SANDBOX_PORT: 8194
    caproverExtra:
      notExposeAsWebApp: 'true'

  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/learn-more/faq/install-faq#id-18.-why-is-ssrf_proxy-needed
  $$cap_appname-ssrf-proxy:
    image: aristofanio/tk_ai_kit_dify_ssrf_proxy:latest
    restart: always
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: 3128
      COREDUMP_DIR: /var/spool/squid
      REVERSE_PROXY_PORT: 8194
      SANDBOX_HOST: srv-captain--$$cap_appname-sandbox
      SANDBOX_PORT: 8194

  # The Weaviate vector store.
  $$cap_appname-weaviate:
    image: aristofanio/tk_ai_kit_dify_weaviate:latest
    restart: always
    environment:
      # The Weaviate configurations
      # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars) documentation for more information.
      PERSISTENCE_DATA_PATH: /var/lib/weaviate
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: false
      DEFAULT_VECTORIZER_MODULE: none
      CLUSTER_HOSTNAME: node1
      AUTHENTICATION_APIKEY_ENABLED: true
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih
      AUTHENTICATION_APIKEY_USERS: hello@dify.ai
      AUTHORIZATION_ADMINLIST_ENABLED: true
      AUTHORIZATION_ADMINLIST_USERS: hello@dify.ai

  # The nginx reverse proxy.
  # used for reverse proxying the API service and Web service.
  $$cap_appname:
    image: aristofanio/tk_ai_kit_dify_nginx:latest
    restart: always
    environment:
      NGINX_SERVER_NAME: "_"
      NGINX_HTTPS_ENABLED: false
      NGINX_PORT: 80
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_WORKER_PROCESSES: auto
      NGINX_CLIENT_MAX_BODY_SIZE: 15M
      NGINX_KEEPALIVE_TIMEOUT: 65
      NGINX_PROXY_READ_TIMEOUT: 3600s
      NGINX_PROXY_SEND_TIMEOUT: 3600s
      NGINX_SERVER_PROXY_PASS_API: srv-captain--$$cap_appname-api
      NGINX_SERVER_PROXY_PASS_WEB: srv-captain--$$cap_appname-web
    ports:
      - '80:80'
    depends_on:
      - api
      - web
caproverOneClickApp:
  variables:
    - id: $$cap_dify-domain
      label: Caprover Apps Root Domain
      defaultValue: 
      description: Adicione o domínio root dos aplicativos nesse caprover.
      validRegex: /^([^\s^\/])+$/
    - id: $$cap_dify-pg-host
      label: Postgres Host (DB_HOST)
      defaultValue: srv-captain--tk-ai-kit-postgressql
      description: Adicione o IP ou o Host do Banco de Dados (PostgresSQL) - Já deve ter um database 'dify'.
      validRegex: /^([^\s^\/])+$/
    - id: $$cap_dify-redis-host
      label: Redis Host (REDIS_HOST)
      defaultValue: srv-captain--tk-ai-kit-redis
      description: Adicione o IP ou o Host do Redis.
      validRegex: /^([^\s^\/])+$/
  instructions:
      start: Dify is an open-source LLM app development platform. Orchestrate LLM apps from agents to complex AI workflows, with an RAG engine. More production-ready than LangChain.
      end: Dify is deployed and available.
  displayName: Dify customized by Toukio
  description: Dify is an open-source LLM app development platform. Orchestrate LLM apps from agents to complex AI workflows, with an RAG engine. More production-ready than LangChain.
  documentation: https://dify.ai